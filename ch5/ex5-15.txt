Exercise 5-15.  Look up the times the shell built-in, and add a line to
your .profile so that when you log off the shell prints how much CPU time you
have used.


Solution 5-15
Printing out how much CPU time has been used. Add this line to .profile:
trap times 2>/dev/null EXIT
But, this will only  work for login shells. For non-login shells, add
this line to ~/.bashrc (for Bash shells, which is what the test system uses).

Deeper explanation on how the times builtin is implemented in Bash:
The Bash source has been installed into
~/proj/bash-src/bash-5.0/builtins
`times` built-in source installed into
/home/chris/proj/bash-src/bash-5.0/builtins/times.def
.def files are meant to be pre-processed by a tool that generates the C
source file implementing the built-in function.
The times() library function source is provided in the file: 
~/proj/bash-src/bash-5.0/lib/sh/times.c

For the solution to this exercise, one possibility is to take the C source
from the Bash times built-in and use that code to write a new C program
that can included for execution in .profile.
Another option is to write a Bash shell version of this built-in and include
the Bash shell code in .profile.

Login shells vs non-login shells.
Most shells on modern systems are non-login shells. For example, all the GUI
terminals in X and virtual terminal, shell script sub-shells are all non-login
shells.
Running Bash with the -l option starts the shell in login mode. This way
.profile is read.

Made Bash from source with:
$ ./configure
$ make
By default *.c builtin source files are removed by the Makefiles
Edited the Makefiles for the Bash source so that intermediate files are not deleted. Ran 'make' again after editing the builtins/Makefile.

Finally ended up with builtins/times.c source file.
The times behavior is defined in times_builtin() in builtins/times.c
times_builtin() is basically a wrapper around the times() library function
implemented in lib/sh/times.c.

